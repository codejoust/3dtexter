{"version":3,"sources":["/gif.worker.coffee","/GIFEncoder.js","/LZWEncoder.js","/TypedNeuQuant.js"],"names":["b","c","a","d","e","self","page","pages","newPage","width","height","transparent","transIndex","repeat","delay","image","pixels","indexedPixels","colorDepth","colorTab","usedEntry","Array","palSize","dispose","firstFrame","sample","out","f","g","pageSize","charMap","String","fromCharCode","prototype","Uint8Array","cursor","getData","length","writeByte","writeUTFBytes","charCodeAt","writeBytes","setDelay","Math","round","setFrameRate","setDispose","setRepeat","setTransparent","addFrame","getImagePixels","analyzePixels","writeLSD","writePalette","writeNetscapeExt","writeGraphicCtrlExt","writeImageDesc","writePixels","finish","setQuality","writeHeader","buildColormap","getColormap","lookupRGB","findClosest","k","l","m","j","h","i","writeShort","encode","stream","exports","y","D","C","B","w","r","t","x","u","A","z","s","q","n_bits","p","o","v","n","remaining","curPixel","max","Int32Array","I","Float64Array","J","K","L","abs","min","E","F","G","H"],"mappings":"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","sourceRoot":"../src","sourcesContent":["GIFEncoder = require './GIFEncoder.js'\n\nrenderFrame = (frame) ->\n  encoder = new GIFEncoder frame.width, frame.height\n\n  if frame.index is 0\n    encoder.writeHeader()\n  else\n    encoder.firstFrame = false\n\n  encoder.setRepeat frame.repeat\n  encoder.setDelay frame.delay\n  encoder.setQuality frame.quality\n  encoder.addFrame frame.data\n  encoder.finish() if frame.last\n\n  stream = encoder.stream()\n  frame.data = stream.pages\n  frame.cursor = stream.cursor\n  frame.pageSize = stream.constructor.pageSize\n\n  if frame.canTransfer\n    transfer = (page.buffer for page in frame.data)\n    self.postMessage frame, transfer\n  else\n    self.postMessage frame\n\nself.onmessage = (event) -> renderFrame event.data\n","/*\n  GIFEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n*/\n\nvar NeuQuant = require('./TypedNeuQuant.js');\nvar LZWEncoder = require('./LZWEncoder.js');\n\nfunction ByteArray() {\n  this.page = -1;\n  this.pages = [];\n  this.newPage();\n}\n\nByteArray.pageSize = 4096;\nByteArray.charMap = {};\n\nfor (var i = 0; i < 256; i++)\n  ByteArray.charMap[i] = String.fromCharCode(i);\n\nByteArray.prototype.newPage = function() {\n  this.pages[++this.page] = new Uint8Array(ByteArray.pageSize);\n  this.cursor = 0;\n};\n\nByteArray.prototype.getData = function() {\n  var rv = '';\n  for (var p = 0; p < this.pages.length; p++) {\n    for (var i = 0; i < ByteArray.pageSize; i++) {\n      rv += ByteArray.charMap[this.pages[p][i]];\n    }\n  }\n  return rv;\n};\n\nByteArray.prototype.writeByte = function(val) {\n  if (this.cursor >= ByteArray.pageSize) this.newPage();\n  this.pages[this.page][this.cursor++] = val;\n};\n\nByteArray.prototype.writeUTFBytes = function(string) {\n  for (var l = string.length, i = 0; i < l; i++)\n    this.writeByte(string.charCodeAt(i));\n};\n\nByteArray.prototype.writeBytes = function(array, offset, length) {\n  for (var l = length || array.length, i = offset || 0; i < l; i++)\n    this.writeByte(array[i]);\n};\n\nfunction GIFEncoder(width, height) {\n  // image size\n  this.width = ~~width;\n  this.height = ~~height;\n\n  // transparent color if given\n  this.transparent = null;\n\n  // transparent index in color table\n  this.transIndex = 0;\n\n  // -1 = no repeat, 0 = forever. anything else is repeat count\n  this.repeat = -1;\n\n  // frame delay (hundredths)\n  this.delay = 0;\n\n  this.image = null; // current frame\n  this.pixels = null; // BGR byte array from frame\n  this.indexedPixels = null; // converted frame indexed to palette\n  this.colorDepth = null; // number of bit planes\n  this.colorTab = null; // RGB palette\n  this.usedEntry = new Array(); // active palette entries\n  this.palSize = 7; // color table size (bits-1)\n  this.dispose = -1; // disposal code (-1 = use default)\n  this.firstFrame = true;\n  this.sample = 10; // default sample interval for quantizer\n\n  this.out = new ByteArray();\n}\n\n/*\n  Sets the delay time between each frame, or changes it for subsequent frames\n  (applies to last frame added)\n*/\nGIFEncoder.prototype.setDelay = function(milliseconds) {\n  this.delay = Math.round(milliseconds / 10);\n};\n\n/*\n  Sets frame rate in frames per second.\n*/\nGIFEncoder.prototype.setFrameRate = function(fps) {\n  this.delay = Math.round(100 / fps);\n};\n\n/*\n  Sets the GIF frame disposal code for the last added frame and any\n  subsequent frames.\n\n  Default is 0 if no transparent color has been set, otherwise 2.\n*/\nGIFEncoder.prototype.setDispose = function(disposalCode) {\n  if (disposalCode >= 0) this.dispose = disposalCode;\n};\n\n/*\n  Sets the number of times the set of GIF frames should be played.\n\n  -1 = play once\n  0 = repeat indefinitely\n\n  Default is -1\n\n  Must be invoked before the first image is added\n*/\n\nGIFEncoder.prototype.setRepeat = function(repeat) {\n  this.repeat = repeat;\n};\n\n/*\n  Sets the transparent color for the last added frame and any subsequent\n  frames. Since all colors are subject to modification in the quantization\n  process, the color in the final palette for each frame closest to the given\n  color becomes the transparent color for that frame. May be set to null to\n  indicate no transparent color.\n*/\nGIFEncoder.prototype.setTransparent = function(color) {\n  this.transparent = color;\n};\n\n/*\n  Adds next GIF frame. The frame is not written immediately, but is\n  actually deferred until the next frame is received so that timing\n  data can be inserted.  Invoking finish() flushes all frames.\n*/\nGIFEncoder.prototype.addFrame = function(imageData) {\n  this.image = imageData;\n\n  this.getImagePixels(); // convert to correct format if necessary\n  this.analyzePixels(); // build color table & map pixels\n\n  if (this.firstFrame) {\n    this.writeLSD(); // logical screen descriptior\n    this.writePalette(); // global color table\n    if (this.repeat >= 0) {\n      // use NS app extension to indicate reps\n      this.writeNetscapeExt();\n    }\n  }\n\n  this.writeGraphicCtrlExt(); // write graphic control extension\n  this.writeImageDesc(); // image descriptor\n  if (!this.firstFrame) this.writePalette(); // local color table\n  this.writePixels(); // encode and write pixel data\n\n  this.firstFrame = false;\n};\n\n/*\n  Adds final trailer to the GIF stream, if you don't call the finish method\n  the GIF stream will not be valid.\n*/\nGIFEncoder.prototype.finish = function() {\n  this.out.writeByte(0x3b); // gif trailer\n};\n\n/*\n  Sets quality of color quantization (conversion of images to the maximum 256\n  colors allowed by the GIF specification). Lower values (minimum = 1)\n  produce better colors, but slow processing significantly. 10 is the\n  default, and produces good color mapping at reasonable speeds. Values\n  greater than 20 do not yield significant improvements in speed.\n*/\nGIFEncoder.prototype.setQuality = function(quality) {\n  if (quality < 1) quality = 1;\n  this.sample = quality;\n};\n\n/*\n  Writes GIF file header\n*/\nGIFEncoder.prototype.writeHeader = function() {\n  this.out.writeUTFBytes(\"GIF89a\");\n};\n\n/*\n  Analyzes current frame colors and creates color map.\n*/\nGIFEncoder.prototype.analyzePixels = function() {\n  var len = this.pixels.length;\n  var nPix = len / 3;\n\n  this.indexedPixels = new Uint8Array(nPix);\n\n  var imgq = new NeuQuant(this.pixels, this.sample);\n  imgq.buildColormap(); // create reduced palette\n  this.colorTab = imgq.getColormap();\n\n  // map image pixels to new palette\n  var k = 0;\n  for (var j = 0; j < nPix; j++) {\n    var index = imgq.lookupRGB(\n      this.pixels[k++] & 0xff,\n      this.pixels[k++] & 0xff,\n      this.pixels[k++] & 0xff\n    );\n    this.usedEntry[index] = true;\n    this.indexedPixels[j] = index;\n  }\n\n  this.pixels = null;\n  this.colorDepth = 8;\n  this.palSize = 7;\n\n  // get closest match to transparent color if specified\n  if (this.transparent !== null) {\n    this.transIndex = this.findClosest(this.transparent);\n  }\n};\n\n/*\n  Returns index of palette color closest to c\n*/\nGIFEncoder.prototype.findClosest = function(c) {\n  if (this.colorTab === null) return -1;\n\n  var r = (c & 0xFF0000) >> 16;\n  var g = (c & 0x00FF00) >> 8;\n  var b = (c & 0x0000FF);\n  var minpos = 0;\n  var dmin = 256 * 256 * 256;\n  var len = this.colorTab.length;\n\n  for (var i = 0; i < len;) {\n    var dr = r - (this.colorTab[i++] & 0xff);\n    var dg = g - (this.colorTab[i++] & 0xff);\n    var db = b - (this.colorTab[i] & 0xff);\n    var d = dr * dr + dg * dg + db * db;\n    var index = i / 3;\n    if (this.usedEntry[index] && (d < dmin)) {\n      dmin = d;\n      minpos = index;\n    }\n    i++;\n  }\n\n  return minpos;\n};\n\n/*\n  Extracts image pixels into byte array pixels\n  (removes alphachannel from canvas imagedata)\n*/\nGIFEncoder.prototype.getImagePixels = function() {\n  var w = this.width;\n  var h = this.height;\n  this.pixels = new Uint8Array(w * h * 3);\n\n  var data = this.image;\n  var count = 0;\n\n  for (var i = 0; i < h; i++) {\n    for (var j = 0; j < w; j++) {\n      var b = (i * w * 4) + j * 4;\n      this.pixels[count++] = data[b];\n      this.pixels[count++] = data[b+1];\n      this.pixels[count++] = data[b+2];\n    }\n  }\n};\n\n/*\n  Writes Graphic Control Extension\n*/\nGIFEncoder.prototype.writeGraphicCtrlExt = function() {\n  this.out.writeByte(0x21); // extension introducer\n  this.out.writeByte(0xf9); // GCE label\n  this.out.writeByte(4); // data block size\n\n  var transp, disp;\n  if (this.transparent === null) {\n    transp = 0;\n    disp = 0; // dispose = no action\n  } else {\n    transp = 1;\n    disp = 2; // force clear if using transparent color\n  }\n\n  if (this.dispose >= 0) {\n    disp = dispose & 7; // user override\n  }\n  disp <<= 2;\n\n  // packed fields\n  this.out.writeByte(\n    0 | // 1:3 reserved\n    disp | // 4:6 disposal\n    0 | // 7 user input - 0 = none\n    transp // 8 transparency flag\n  );\n\n  this.writeShort(this.delay); // delay x 1/100 sec\n  this.out.writeByte(this.transIndex); // transparent color index\n  this.out.writeByte(0); // block terminator\n};\n\n/*\n  Writes Image Descriptor\n*/\nGIFEncoder.prototype.writeImageDesc = function() {\n  this.out.writeByte(0x2c); // image separator\n  this.writeShort(0); // image position x,y = 0,0\n  this.writeShort(0);\n  this.writeShort(this.width); // image size\n  this.writeShort(this.height);\n\n  // packed fields\n  if (this.firstFrame) {\n    // no LCT - GCT is used for first (or only) frame\n    this.out.writeByte(0);\n  } else {\n    // specify normal LCT\n    this.out.writeByte(\n      0x80 | // 1 local color table 1=yes\n      0 | // 2 interlace - 0=no\n      0 | // 3 sorted - 0=no\n      0 | // 4-5 reserved\n      this.palSize // 6-8 size of color table\n    );\n  }\n};\n\n/*\n  Writes Logical Screen Descriptor\n*/\nGIFEncoder.prototype.writeLSD = function() {\n  // logical screen size\n  this.writeShort(this.width);\n  this.writeShort(this.height);\n\n  // packed fields\n  this.out.writeByte(\n    0x80 | // 1 : global color table flag = 1 (gct used)\n    0x70 | // 2-4 : color resolution = 7\n    0x00 | // 5 : gct sort flag = 0\n    this.palSize // 6-8 : gct size\n  );\n\n  this.out.writeByte(0); // background color index\n  this.out.writeByte(0); // pixel aspect ratio - assume 1:1\n};\n\n/*\n  Writes Netscape application extension to define repeat count.\n*/\nGIFEncoder.prototype.writeNetscapeExt = function() {\n  this.out.writeByte(0x21); // extension introducer\n  this.out.writeByte(0xff); // app extension label\n  this.out.writeByte(11); // block size\n  this.out.writeUTFBytes('NETSCAPE2.0'); // app id + auth code\n  this.out.writeByte(3); // sub-block size\n  this.out.writeByte(1); // loop sub-block id\n  this.writeShort(this.repeat); // loop count (extra iterations, 0=repeat forever)\n  this.out.writeByte(0); // block terminator\n};\n\n/*\n  Writes color table\n*/\nGIFEncoder.prototype.writePalette = function() {\n  this.out.writeBytes(this.colorTab);\n  var n = (3 * 256) - this.colorTab.length;\n  for (var i = 0; i < n; i++)\n    this.out.writeByte(0);\n};\n\nGIFEncoder.prototype.writeShort = function(pValue) {\n  this.out.writeByte(pValue & 0xFF);\n  this.out.writeByte((pValue >> 8) & 0xFF);\n};\n\n/*\n  Encodes and writes pixel data\n*/\nGIFEncoder.prototype.writePixels = function() {\n  var enc = new LZWEncoder(this.width, this.height, this.indexedPixels, this.colorDepth);\n  enc.encode(this.out);\n};\n\n/*\n  Retrieves the GIF stream\n*/\nGIFEncoder.prototype.stream = function() {\n  return this.out;\n};\n\nmodule.exports = GIFEncoder;\n","/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\n\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n             0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n             0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n\n  var cur_accum, cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n  var maxcode;\n\n  // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n  var clear_flg = false;\n\n  // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n  var g_init_bits, ClearCode, EOFCode;\n\n  // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    if (a_count >= 254) flush_char(outs);\n  }\n\n  // Clear out the hash table\n  // table clear for block compress\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  }\n\n  // Reset code table\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift;\n\n    // Set up the globals: g_init_bits - initial number of bits\n    g_init_bits = init_bits;\n\n    // Set up the necessary values\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n\n    ClearCode = 1 << (init_bits - 1);\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n\n    hshift = 0;\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n    hshift = 8 - hshift; // set hash code range bound\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = (c << hshift) ^ ent; // xor hashing\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) { // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n        if (i === 0) disp = 1;\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n      output(ent, outs);\n      ent = c;\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    }\n\n    // Put out the final code.\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n    remaining = width * height; // reset navigation variables\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n    outs.writeByte(0); // write block terminator\n  }\n\n  // Flush the packet to disk, and reset the accumulator\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  }\n\n  // Return the next pixel from the image\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n\n    if (cur_bits > 0) cur_accum |= (code << cur_bits);\n    else cur_accum = code;\n\n    cur_bits += n_bits;\n\n    while (cur_bits >= 8) {\n      char_out((cur_accum & 0xff), outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;\n        else maxcode = MAXCODE(n_bits);\n      }\n    }\n\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out((cur_accum & 0xff), outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n      flush_char(outs);\n    }\n  }\n\n  this.encode = encode;\n}\n\nmodule.exports = LZWEncoder;\n","/* NeuQuant Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n * See \"Kohonen neural networks for optimal colour quantization\"\n * in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n * for a discussion of the algorithm.\n * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal\n * in this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons who receive\n * copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n *\n * (JavaScript port 2012 by Johan Nordberg)\n */\n\nvar ncycles = 100; // number of learning cycles\nvar netsize = 256; // number of colors used\nvar maxnetpos = netsize - 1;\n\n// defs for freq and bias\nvar netbiasshift = 4; // bias for colour values\nvar intbiasshift = 16; // bias for fractions\nvar intbias = (1 << intbiasshift);\nvar gammashift = 10;\nvar gamma = (1 << gammashift);\nvar betashift = 10;\nvar beta = (intbias >> betashift); /* beta = 1/1024 */\nvar betagamma = (intbias << (gammashift - betashift));\n\n// defs for decreasing radius factor\nvar initrad = (netsize >> 3); // for 256 cols, radius starts\nvar radiusbiasshift = 6; // at 32.0 biased by 6 bits\nvar radiusbias = (1 << radiusbiasshift);\nvar initradius = (initrad * radiusbias); //and decreases by a\nvar radiusdec = 30; // factor of 1/30 each cycle\n\n// defs for decreasing alpha factor\nvar alphabiasshift = 10; // alpha starts at 1.0\nvar initalpha = (1 << alphabiasshift);\nvar alphadec; // biased by 10 bits\n\n/* radbias and alpharadbias used for radpower calculation */\nvar radbiasshift = 8;\nvar radbias = (1 << radbiasshift);\nvar alpharadbshift = (alphabiasshift + radbiasshift);\nvar alpharadbias = (1 << alpharadbshift);\n\n// four primes near 500 - assume no image has a length so large that it is\n// divisible by all four primes\nvar prime1 = 499;\nvar prime2 = 491;\nvar prime3 = 487;\nvar prime4 = 503;\nvar minpicturebytes = (3 * prime4);\n\n/*\n  Constructor: NeuQuant\n\n  Arguments:\n\n  pixels - array of pixels in RGB format\n  samplefac - sampling factor 1 to 30 where lower is better quality\n\n  >\n  > pixels = [r, g, b, r, g, b, r, g, b, ..]\n  >\n*/\nfunction NeuQuant(pixels, samplefac) {\n  var network; // int[netsize][4]\n  var netindex; // for network lookup - really 256\n\n  // bias and freq arrays for learning\n  var bias;\n  var freq;\n  var radpower;\n\n  /*\n    Private Method: init\n\n    sets up arrays\n  */\n  function init() {\n    network = [];\n    netindex = new Int32Array(256);\n    bias = new Int32Array(netsize);\n    freq = new Int32Array(netsize);\n    radpower = new Int32Array(netsize >> 3);\n\n    var i, v;\n    for (i = 0; i < netsize; i++) {\n      v = (i << (netbiasshift + 8)) / netsize;\n      network[i] = new Float64Array([v, v, v, 0]);\n      //network[i] = [v, v, v, 0]\n      freq[i] = intbias / netsize;\n      bias[i] = 0;\n    }\n  }\n\n  /*\n    Private Method: unbiasnet\n\n    unbiases network to give byte values 0..255 and record position i to prepare for sort\n  */\n  function unbiasnet() {\n    for (var i = 0; i < netsize; i++) {\n      network[i][0] >>= netbiasshift;\n      network[i][1] >>= netbiasshift;\n      network[i][2] >>= netbiasshift;\n      network[i][3] = i; // record color number\n    }\n  }\n\n  /*\n    Private Method: altersingle\n\n    moves neuron *i* towards biased (b,g,r) by factor *alpha*\n  */\n  function altersingle(alpha, i, b, g, r) {\n    network[i][0] -= (alpha * (network[i][0] - b)) / initalpha;\n    network[i][1] -= (alpha * (network[i][1] - g)) / initalpha;\n    network[i][2] -= (alpha * (network[i][2] - r)) / initalpha;\n  }\n\n  /*\n    Private Method: alterneigh\n\n    moves neurons in *radius* around index *i* towards biased (b,g,r) by factor *alpha*\n  */\n  function alterneigh(radius, i, b, g, r) {\n    var lo = Math.abs(i - radius);\n    var hi = Math.min(i + radius, netsize);\n\n    var j = i + 1;\n    var k = i - 1;\n    var m = 1;\n\n    var p, a;\n    while ((j < hi) || (k > lo)) {\n      a = radpower[m++];\n\n      if (j < hi) {\n        p = network[j++];\n        p[0] -= (a * (p[0] - b)) / alpharadbias;\n        p[1] -= (a * (p[1] - g)) / alpharadbias;\n        p[2] -= (a * (p[2] - r)) / alpharadbias;\n      }\n\n      if (k > lo) {\n        p = network[k--];\n        p[0] -= (a * (p[0] - b)) / alpharadbias;\n        p[1] -= (a * (p[1] - g)) / alpharadbias;\n        p[2] -= (a * (p[2] - r)) / alpharadbias;\n      }\n    }\n  }\n\n  /*\n    Private Method: contest\n\n    searches for biased BGR values\n  */\n  function contest(b, g, r) {\n    /*\n      finds closest neuron (min dist) and updates freq\n      finds best neuron (min dist-bias) and returns position\n      for frequently chosen neurons, freq[i] is high and bias[i] is negative\n      bias[i] = gamma * ((1 / netsize) - freq[i])\n    */\n\n    var bestd = ~(1 << 31);\n    var bestbiasd = bestd;\n    var bestpos = -1;\n    var bestbiaspos = bestpos;\n\n    var i, n, dist, biasdist, betafreq;\n    for (i = 0; i < netsize; i++) {\n      n = network[i];\n\n      dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\n      if (dist < bestd) {\n        bestd = dist;\n        bestpos = i;\n      }\n\n      biasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));\n      if (biasdist < bestbiasd) {\n        bestbiasd = biasdist;\n        bestbiaspos = i;\n      }\n\n      betafreq = (freq[i] >> betashift);\n      freq[i] -= betafreq;\n      bias[i] += (betafreq << gammashift);\n    }\n\n    freq[bestpos] += beta;\n    bias[bestpos] -= betagamma;\n\n    return bestbiaspos;\n  }\n\n  /*\n    Private Method: inxbuild\n\n    sorts network and builds netindex[0..255]\n  */\n  function inxbuild() {\n    var i, j, p, q, smallpos, smallval, previouscol = 0, startpos = 0;\n    for (i = 0; i < netsize; i++) {\n      p = network[i];\n      smallpos = i;\n      smallval = p[1]; // index on g\n      // find smallest in i..netsize-1\n      for (j = i + 1; j < netsize; j++) {\n        q = network[j];\n        if (q[1] < smallval) { // index on g\n          smallpos = j;\n          smallval = q[1]; // index on g\n        }\n      }\n      q = network[smallpos];\n      // swap p (i) and q (smallpos) entries\n      if (i != smallpos) {\n        j = q[0];   q[0] = p[0];   p[0] = j;\n        j = q[1];   q[1] = p[1];   p[1] = j;\n        j = q[2];   q[2] = p[2];   p[2] = j;\n        j = q[3];   q[3] = p[3];   p[3] = j;\n      }\n      // smallval entry is now in position i\n\n      if (smallval != previouscol) {\n        netindex[previouscol] = (startpos + i) >> 1;\n        for (j = previouscol + 1; j < smallval; j++)\n          netindex[j] = i;\n        previouscol = smallval;\n        startpos = i;\n      }\n    }\n    netindex[previouscol] = (startpos + maxnetpos) >> 1;\n    for (j = previouscol + 1; j < 256; j++)\n      netindex[j] = maxnetpos; // really 256\n  }\n\n  /*\n    Private Method: inxsearch\n\n    searches for BGR values 0..255 and returns a color index\n  */\n  function inxsearch(b, g, r) {\n    var a, p, dist;\n\n    var bestd = 1000; // biggest possible dist is 256*3\n    var best = -1;\n\n    var i = netindex[g]; // index on g\n    var j = i - 1; // start at netindex[g] and work outwards\n\n    while ((i < netsize) || (j >= 0)) {\n      if (i < netsize) {\n        p = network[i];\n        dist = p[1] - g; // inx key\n        if (dist >= bestd) i = netsize; // stop iter\n        else {\n          i++;\n          if (dist < 0) dist = -dist;\n          a = p[0] - b; if (a < 0) a = -a;\n          dist += a;\n          if (dist < bestd) {\n            a = p[2] - r; if (a < 0) a = -a;\n            dist += a;\n            if (dist < bestd) {\n              bestd = dist;\n              best = p[3];\n            }\n          }\n        }\n      }\n      if (j >= 0) {\n        p = network[j];\n        dist = g - p[1]; // inx key - reverse dif\n        if (dist >= bestd) j = -1; // stop iter\n        else {\n          j--;\n          if (dist < 0) dist = -dist;\n          a = p[0] - b; if (a < 0) a = -a;\n          dist += a;\n          if (dist < bestd) {\n            a = p[2] - r; if (a < 0) a = -a;\n            dist += a;\n            if (dist < bestd) {\n              bestd = dist;\n              best = p[3];\n            }\n          }\n        }\n      }\n    }\n\n    return best;\n  }\n\n  /*\n    Private Method: learn\n\n    \"Main Learning Loop\"\n  */\n  function learn() {\n    var i;\n\n    var lengthcount = pixels.length;\n    var alphadec = 30 + ((samplefac - 1) / 3);\n    var samplepixels = lengthcount / (3 * samplefac);\n    var delta = ~~(samplepixels / ncycles);\n    var alpha = initalpha;\n    var radius = initradius;\n\n    var rad = radius >> radiusbiasshift;\n\n    if (rad <= 1) rad = 0;\n    for (i = 0; i < rad; i++)\n      radpower[i] = alpha * (((rad * rad - i * i) * radbias) / (rad * rad));\n\n    var step;\n    if (lengthcount < minpicturebytes) {\n      samplefac = 1;\n      step = 3;\n    } else if ((lengthcount % prime1) !== 0) {\n      step = 3 * prime1;\n    } else if ((lengthcount % prime2) !== 0) {\n      step = 3 * prime2;\n    } else if ((lengthcount % prime3) !== 0)  {\n      step = 3 * prime3;\n    } else {\n      step = 3 * prime4;\n    }\n\n    var b, g, r, j;\n    var pix = 0; // current pixel\n\n    i = 0;\n    while (i < samplepixels) {\n      b = (pixels[pix] & 0xff) << netbiasshift;\n      g = (pixels[pix + 1] & 0xff) << netbiasshift;\n      r = (pixels[pix + 2] & 0xff) << netbiasshift;\n\n      j = contest(b, g, r);\n\n      altersingle(alpha, j, b, g, r);\n      if (rad !== 0) alterneigh(rad, j, b, g, r); // alter neighbours\n\n      pix += step;\n      if (pix >= lengthcount) pix -= lengthcount;\n\n      i++;\n\n      if (delta === 0) delta = 1;\n      if (i % delta === 0) {\n        alpha -= alpha / alphadec;\n        radius -= radius / radiusdec;\n        rad = radius >> radiusbiasshift;\n\n        if (rad <= 1) rad = 0;\n        for (j = 0; j < rad; j++)\n          radpower[j] = alpha * (((rad * rad - j * j) * radbias) / (rad * rad));\n      }\n    }\n  }\n\n  /*\n    Method: buildColormap\n\n    1. initializes network\n    2. trains it\n    3. removes misconceptions\n    4. builds colorindex\n  */\n  function buildColormap() {\n    init();\n    learn();\n    unbiasnet();\n    inxbuild();\n  }\n  this.buildColormap = buildColormap;\n\n  /*\n    Method: getColormap\n\n    builds colormap from the index\n\n    returns array in the format:\n\n    >\n    > [r, g, b, r, g, b, r, g, b, ..]\n    >\n  */\n  function getColormap() {\n    var map = [];\n    var index = [];\n\n    for (var i = 0; i < netsize; i++)\n      index[network[i][3]] = i;\n\n    var k = 0;\n    for (var l = 0; l < netsize; l++) {\n      var j = index[l];\n      map[k++] = (network[j][0]);\n      map[k++] = (network[j][1]);\n      map[k++] = (network[j][2]);\n    }\n    return map;\n  }\n  this.getColormap = getColormap;\n\n  /*\n    Method: lookupRGB\n\n    looks for the closest *r*, *g*, *b* color in the map and\n    returns its index\n  */\n  this.lookupRGB = inxsearch;\n}\n\nmodule.exports = NeuQuant;\n"]}